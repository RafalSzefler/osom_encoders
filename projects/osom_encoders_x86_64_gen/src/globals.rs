use std::{path::PathBuf, str::FromStr, sync::LazyLock};

pub static WORKSPACE_DIR: LazyLock<PathBuf> = LazyLock::new(|| {
    let src_dir = core::env!("CARGO_WORKSPACE_DIR");
    PathBuf::from_str(src_dir).unwrap()
});

pub static ROOT_DIR: LazyLock<PathBuf> = LazyLock::new(|| {
    let src_dir = core::env!("CARGO_MANIFEST_DIR");
    PathBuf::from_str(src_dir).unwrap()
});

pub static DEFAULT_INSTRUCTIONS_XML: LazyLock<PathBuf> =
    LazyLock::new(|| ROOT_DIR.join("src").join("instructions.xml"));

pub static OUT_DIR: LazyLock<PathBuf> =
    LazyLock::new(|| WORKSPACE_DIR.join("projects").join("osom_encoders_x86_64").join("src"));

pub static ENCODING_DIR: LazyLock<PathBuf> = LazyLock::new(|| OUT_DIR.join("encoders"));

pub static ENCODING_OUT_DIR: LazyLock<PathBuf> = LazyLock::new(|| ENCODING_DIR.join("encoding_funcs"));

pub static AUTO_GENERATED_HEADER: LazyLock<String> = LazyLock::new(|| {
    "
//! # Auto-generated
//! 
//! This file was generated by a build script.
//!
//! The build script monitors this file and regenerates it on changes.
//! Manual modifications will be lost.
"
    .trim()
    .to_string()
});
