use std::{path::PathBuf, str::FromStr, sync::LazyLock};

pub static WORKSPACE_DIR: LazyLock<PathBuf> = LazyLock::new(|| {
    let src_dir = core::env!("CARGO_WORKSPACE_DIR");
    PathBuf::from_str(src_dir).unwrap()
});

pub static ROOT_DIR: LazyLock<PathBuf> = LazyLock::new(|| {
    let src_dir = core::env!("CARGO_MANIFEST_DIR");
    PathBuf::from_str(src_dir).unwrap()
});

pub static BUILD_DIR: LazyLock<PathBuf> = LazyLock::new(|| ROOT_DIR.join("build"));

pub static SRC_DIR: LazyLock<PathBuf> = LazyLock::new(|| ROOT_DIR.join("src"));

pub static ENCODING_DIR: LazyLock<PathBuf> = LazyLock::new(|| SRC_DIR.join("encoders"));

pub static ENCODING_OUT_DIR: LazyLock<PathBuf> = LazyLock::new(|| ENCODING_DIR.join("encoding_funcs"));

pub static AUTO_GENERATED_HEADER: LazyLock<String> = LazyLock::new(|| {
    "
//! # Auto-generated
//! 
//! This file was generated by a build script.
//!
//! The build script monitors this file and regenerates it on changes.
//! Manual modifications will be lost.
"
    .trim()
    .to_string()
});
