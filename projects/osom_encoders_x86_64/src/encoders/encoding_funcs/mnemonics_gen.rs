//! # Auto-generated
//!
//! This file was generated by a build script.
//!
//! The build script monitors this file and regenerates it on changes.
//! Manual modifications will be lost.
#![allow(non_camel_case_types)]

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct InvalidMnemonicError;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
#[repr(u8)]
#[must_use]
pub enum Mnemonic {
    nop = 1,
    lock = 2,
    cpuid = 3,
    ret = 4,
    mov = 5,
    push = 6,
    pop = 7,
    lea = 8,
    add = 9,
    sub = 10,
    xor = 11,
    cmp = 12,
    jmp = 13,
    jcc = 14,
    call = 15,
    int = 16,
    int1 = 17,
    int3 = 18,
    sysenter = 19,
    syscall = 20,
}

impl Mnemonic {
    #[inline]
    #[must_use]
    pub const fn as_str(self) -> &'static str {
        match self {
            Self::nop => "nop",
            Self::lock => "lock",
            Self::cpuid => "cpuid",
            Self::ret => "ret",
            Self::mov => "mov",
            Self::push => "push",
            Self::pop => "pop",
            Self::lea => "lea",
            Self::add => "add",
            Self::sub => "sub",
            Self::xor => "xor",
            Self::cmp => "cmp",
            Self::jmp => "jmp",
            Self::jcc => "jcc",
            Self::call => "call",
            Self::int => "int",
            Self::int1 => "int1",
            Self::int3 => "int3",
            Self::sysenter => "sysenter",
            Self::syscall => "syscall",
        }
    }

    #[inline]
    pub fn from_str(text: &str) -> Result<Self, InvalidMnemonicError> {
        match text {
            "nop" => Ok(Self::nop),
            "lock" => Ok(Self::lock),
            "cpuid" => Ok(Self::cpuid),
            "ret" => Ok(Self::ret),
            "mov" => Ok(Self::mov),
            "push" => Ok(Self::push),
            "pop" => Ok(Self::pop),
            "lea" => Ok(Self::lea),
            "add" => Ok(Self::add),
            "sub" => Ok(Self::sub),
            "xor" => Ok(Self::xor),
            "cmp" => Ok(Self::cmp),
            "jmp" => Ok(Self::jmp),
            "jcc" => Ok(Self::jcc),
            "call" => Ok(Self::call),
            "int" => Ok(Self::int),
            "int1" => Ok(Self::int1),
            "int3" => Ok(Self::int3),
            "sysenter" => Ok(Self::sysenter),
            "syscall" => Ok(Self::syscall),

            _ => Err(InvalidMnemonicError),
        }
    }
}

const _: () = const {
    assert!(
        size_of::<InvalidMnemonicError>() == 0,
        "InvalidMnemonicError must be 0 bytes."
    );
    assert!(size_of::<Mnemonic>() == 1, "Mnemonic must be 1 byte.");
    assert!(size_of::<Option<Mnemonic>>() == 1, "Option<Mnemonic> must be 1 byte.");
};
